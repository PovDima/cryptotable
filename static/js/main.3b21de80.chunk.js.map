{"version":3,"sources":["App.js","index.js"],"names":["App","useState","setGridApi","rowData","setRowData","defaultColDef","useMemo","col","resizable","sortable","filter","getInfo","type","a","fetch","json","row","data","cryptoCurrencyList","map","r","quotes","percentChange24h","percentChange7d","percentChange30d","price","useEffect","style","display","justifyContent","onClick","className","height","window","innerHeight","width","length","gridOptions","rowSelection","onGridReady","params","api","suppressExcelExport","suppressContextMenu","enableCellTextSelection","localeText","filterOoo","searchOoo","pinColumn","pinLeft","pinRight","autosizeThiscolumn","autosizeAllColumns","resetColumns","noPin","equals","notEqual","empty","contains","notContains","startsWith","endsWith","lessThan","greaterThan","inRange","headerName","field","flex","column","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAkGeA,EA1FH,WACV,MAA8BC,mBAAS,MAAvC,mBAAgBC,GAAhB,WACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAGMC,EAAgBC,mBAAQ,SAACC,GAC7B,MAAO,CACLC,WAAW,EACXC,UAAU,EACVC,OAAQ,wBAET,IAEGC,EAAU,SAACC,GAAD,6BAAU,8BAAAC,EAAA,sEACmCC,MAChD,WAATF,EAAoB,mUAChB,8TAHkB,8BAIrBG,OAJqB,gBACYC,EADZ,EAChBC,KAAQC,mBAIhBd,EAAWY,EAAIG,KAAI,SAAAC,GAAC,kCACfA,GADe,IAElB,iBAAoBA,EAAEC,OAAO,GAAGC,iBAChC,gBAAmBF,EAAEC,OAAO,GAAGE,gBAC/B,iBAAoBH,EAAEC,OAAO,GAAGG,iBAChC,MAASJ,EAAEC,OAAO,GAAGI,YAVC,4CAe1BC,qBAAU,WACRf,EAAQ,SAARA,KACC,IAUH,OACE,gCACE,sBAAKgB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAA/C,UACE,mBAAGC,QAASnB,EAAQ,UAApB,oBACA,mBAAGmB,QAASnB,EAAQ,SAApB,sBAEF,qBAAKoB,UAAW,kBAAmBJ,MAAO,CACxCK,OAAQC,OAAOC,YAAc,GAC7BC,MAAO,QAFT,SAIGhC,EAAQiC,QAAU,cAAC,cAAD,CACjBjC,QAASA,EACTkC,YAAa,CACXC,aAAc,SACdjC,gBACAkC,YApDU,SAACC,GAAD,OAAYtC,EAAWsC,EAAOC,MAqDxCC,qBAAqB,EACrBC,qBAAqB,EACrBC,yBAAyB,EACzBC,WAAY,CACVC,UAAW,uCACXC,UAAW,iCACXC,UAAW,0GACXC,QAAS,8FACTC,SAAU,oGACVC,mBAAoB,iHACpBC,mBAAoB,uHACpBC,aAAc,sHACdC,MAAO,kFACPC,OAAQ,mDACRC,SAAU,gEACVC,MAAO,4EACPC,SAAU,6CACVC,YAAa,0DACbC,WAAY,4EACZC,SAAU,wFACVC,SAAU,0DACVC,YAAa,gEACbC,QAAS,4DA5BI,SAlBT,CACd,CAAEC,WAAY,OAAQC,MAAO,SAAUC,KAAM,GAC7C,CAAEF,WAAY,QAASC,MAAO,QAASC,KAAM,GAC7C,CAAEF,WAAY,MAAOC,MAAO,mBAAoBC,KAAM,GACtD,CAAEF,WAAY,KAAMC,MAAO,kBAAmBC,KAAM,GACpD,CAAEF,WAAY,MAAOC,MAAO,mBAAoBC,KAAM,IA6CvChD,KAAI,SAAAiD,GAAM,OAAI,wBAAC,eAAD,2BAAkBA,GAAlB,IAA0BC,IAAKD,EAAOF,oBCtFvEI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3b21de80.chunk.js","sourcesContent":["import React, { useMemo, useState, useEffect } from 'react'\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n\nconst App = () => {\n  const [gridApi, setGridApi] = useState(null);\n  const [rowData, setRowData] = useState([]);\n  const onGridReady = (params) => setGridApi(params.api)\n\n  const defaultColDef = useMemo((col) => {\n    return {\n      resizable: true,\n      sortable: true,\n      filter: 'agTextColumnFilter',\n    }\n  }, []);\n\n  const getInfo = (type) => async () => {\n    const { data: { cryptoCurrencyList: row } } = await (await fetch(\n      type === 'change' ? 'https://api.coinmarketcap.com/data-api/v3/cryptocurrency/listing?start=1&limit=1000&sortBy=market_cap&sortType=desc&convert=USD,BTC,ETH&cryptoType=all&tagType=all&audited=false&aux=ath,atl,high24h,low24h,num_market_pairs,cmc_rank,date_added,max_supply,circulating_supply,total_supply,volume_7d,volume_30d&priceRange=0.5~'\n        : 'https://api.coinmarketcap.com/data-api/v3/cryptocurrency/listing?start=1&limit=1000&sortBy=price&sortType=asc&convert=USD,BTC,ETH&cryptoType=all&tagType=all&audited=false&aux=ath,atl,high24h,low24h,num_market_pairs,cmc_rank,date_added,max_supply,circulating_supply,total_supply,volume_7d,volume_30d&priceRange=0.5~'\n    )).json()\n    setRowData(row.map(r => ({\n      ...r,\n      \"percentChange24h\": r.quotes[0].percentChange24h,\n      \"percentChange7d\": r.quotes[0].percentChange7d,\n      \"percentChange30d\": r.quotes[0].percentChange30d,\n      \"price\": r.quotes[2].price,\n    }\n    )))\n  }\n\n  useEffect(() => {\n    getInfo('change')()\n  }, [])\n\n  const columns = [\n    { headerName: 'Name', field: 'symbol', flex: 1 },\n    { headerName: 'price', field: 'price', flex: 1 },\n    { headerName: '24h', field: 'percentChange24h', flex: 1 },\n    { headerName: '7d', field: 'percentChange7d', flex: 1 },\n    { headerName: '30d', field: 'percentChange30d', flex: 1 },\n  ]\n\n  return (\n    <div >\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <p onClick={getInfo('change')}>Change</p>\n        <p onClick={getInfo('price')}>Price</p>\n      </div>\n      <div className={\"ag-theme-alpine\"} style={{\n        height: window.innerHeight - 50,\n        width: '100%'\n      }}>\n        {rowData.length && <AgGridReact\n          rowData={rowData}\n          gridOptions={{\n            rowSelection: 'single',\n            defaultColDef,\n            onGridReady,\n            suppressExcelExport: true,\n            suppressContextMenu: true,\n            enableCellTextSelection: true,\n            localeText: {\n              filterOoo: 'Фільтр',\n              searchOoo: 'Пошук',\n              pinColumn: 'Прикріпити колонку',\n              pinLeft: 'Прикріпити зліва',\n              pinRight: 'Прикріпити справа',\n              autosizeThiscolumn: 'Порівняти цю колонку',\n              autosizeAllColumns: 'Порівняти всі колонки',\n              resetColumns: 'Скинути налаштування',\n              noPin: 'Не прикріпляти',\n              equals: 'Дорівнює',\n              notEqual: 'Не дорівнює',\n              empty: 'Виберіть одне',\n              contains: 'Містить',\n              notContains: 'Не містить',\n              startsWith: 'Починається з',\n              endsWith: 'Закінчується на',\n              lessThan: 'Раніше ніж',\n              greaterThan: 'Пізніше ніж',\n              inRange: 'В проміжку',\n            }\n          }}\n        >\n          {columns.map(column => <AgGridColumn {...column} key={column.field} />)}\n        </AgGridReact>\n        }\n      </div >\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}