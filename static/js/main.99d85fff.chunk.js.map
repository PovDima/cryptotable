{"version":3,"sources":["App.js","index.js"],"names":["App","useState","setGridApi","rowData","setRowData","defaultColDef","useMemo","col","resizable","sortable","filter","getInfo","a","fetch","json","row","data","cryptoCurrencyList","map","r","quotes","percentChange24h","percentChange7d","percentChange30d","useEffect","className","style","height","window","innerHeight","width","length","gridOptions","rowSelection","onGridReady","params","api","suppressExcelExport","suppressContextMenu","enableCellTextSelection","localeText","filterOoo","searchOoo","pinColumn","pinLeft","pinRight","autosizeThiscolumn","autosizeAllColumns","resetColumns","noPin","equals","notEqual","empty","contains","notContains","startsWith","endsWith","lessThan","greaterThan","inRange","headerName","field","flex","column","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAuFeA,EA/EH,WACV,MAA8BC,mBAAS,MAAvC,mBAAgBC,GAAhB,WACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAGMC,EAAgBC,mBAAQ,SAACC,GAC7B,MAAO,CACLC,WAAW,EACXC,UAAU,EACVC,OAAQ,wBAET,IAEGC,EAAO,uCAAG,8BAAAC,EAAA,sEAC6CC,MAAM,oTADnD,8BACwWC,OADxW,gBACsBC,EADtB,EACNC,KAAQC,mBAChBb,EAAWW,EAAIG,KAAI,SAAAC,GAAC,kCACfA,GADe,IAElB,iBAAoBA,EAAEC,OAAO,GAAGC,iBAChC,gBAAmBF,EAAEC,OAAO,GAAGE,gBAC/B,iBAAoBH,EAAEC,OAAO,GAAGG,uBANpB,2CAAH,qDAWbC,qBAAU,WACRb,MACC,IASH,OACE,qBAAKc,UAAW,kBAAmBC,MAAO,CACxCC,OAAQC,OAAOC,YACfC,MAAO,QAFT,SAIG3B,EAAQ4B,QAAU,cAAC,cAAD,CACjBC,YAAa,CACXC,aAAc,SACd5B,gBACAF,UACA+B,YA1CY,SAACC,GAAD,OAAYjC,EAAWiC,EAAOC,MA2C1CC,qBAAqB,EACrBC,qBAAqB,EACrBC,yBAAyB,EACzBC,WAAY,CACVC,UAAW,uCACXC,UAAW,iCACXC,UAAW,0GACXC,QAAS,8FACTC,SAAU,oGACVC,mBAAoB,iHACpBC,mBAAoB,uHACpBC,aAAc,sHACdC,MAAO,kFACPC,OAAQ,mDACRC,SAAU,gEACVC,MAAO,4EACPC,SAAU,6CACVC,YAAa,0DACbC,WAAY,4EACZC,SAAU,wFACVC,SAAU,0DACVC,YAAa,gEACbC,QAAS,4DA5BI,SAZP,CACd,CAAEC,WAAY,OAAQC,MAAO,OAAQC,KAAM,GAC3C,CAAEF,WAAY,MAAOC,MAAO,mBAAoBC,KAAM,GACtD,CAAEF,WAAY,KAAMC,MAAO,kBAAmBC,KAAM,GACpD,CAAEF,WAAY,MAAOC,MAAO,mBAAoBC,KAAM,IAwCzC5C,KAAI,SAAA6C,GAAM,OAAI,wBAAC,eAAD,2BAAkBA,GAAlB,IAA0BC,IAAKD,EAAOF,iBC5ErEI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.99d85fff.chunk.js","sourcesContent":["import React, { useMemo, useState, useEffect } from 'react'\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-enterprise';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\n\nconst App = () => {\n  const [gridApi, setGridApi] = useState(null);\n  const [rowData, setRowData] = useState([]);\n  const onGridReady = (params) => setGridApi(params.api)\n\n  const defaultColDef = useMemo((col) => {\n    return {\n      resizable: true,\n      sortable: true,\n      filter: 'agTextColumnFilter',\n    }\n  }, []);\n\n  const getInfo = async () => {\n    const { data: { cryptoCurrencyList: row } } = await (await fetch('https://api.coinmarketcap.com/data-api/v3/cryptocurrency/listing?start=1&limit=1000&sortBy=market_cap&sortType=desc&convert=USD,BTC,ETH&cryptoType=all&tagType=all&audited=false&aux=ath,atl,high24h,low24h,num_market_pairs,cmc_rank,date_added,max_supply,circulating_supply,total_supply,volume_7d,volume_30d')).json()\n    setRowData(row.map(r => ({\n      ...r,\n      \"percentChange24h\": r.quotes[0].percentChange24h,\n      \"percentChange7d\": r.quotes[0].percentChange7d,\n      \"percentChange30d\": r.quotes[0].percentChange30d,\n    }\n    )))\n  }\n\n  useEffect(() => {\n    getInfo()\n  }, [])\n\n  const columns = [\n    { headerName: 'Name', field: 'name', flex: 1 },\n    { headerName: '24h', field: 'percentChange24h', flex: 1 },\n    { headerName: '7d', field: 'percentChange7d', flex: 1 },\n    { headerName: '30d', field: 'percentChange30d', flex: 1 },\n  ]\n\n  return (\n    <div className={\"ag-theme-alpine\"} style={{\n      height: window.innerHeight,\n      width: '100%'\n    }}>\n      {rowData.length && <AgGridReact\n        gridOptions={{\n          rowSelection: 'single',\n          defaultColDef,\n          rowData,\n          onGridReady,\n          suppressExcelExport: true,\n          suppressContextMenu: true,\n          enableCellTextSelection: true,\n          localeText: {\n            filterOoo: 'Фільтр',\n            searchOoo: 'Пошук',\n            pinColumn: 'Прикріпити колонку',\n            pinLeft: 'Прикріпити зліва',\n            pinRight: 'Прикріпити справа',\n            autosizeThiscolumn: 'Порівняти цю колонку',\n            autosizeAllColumns: 'Порівняти всі колонки',\n            resetColumns: 'Скинути налаштування',\n            noPin: 'Не прикріпляти',\n            equals: 'Дорівнює',\n            notEqual: 'Не дорівнює',\n            empty: 'Виберіть одне',\n            contains: 'Містить',\n            notContains: 'Не містить',\n            startsWith: 'Починається з',\n            endsWith: 'Закінчується на',\n            lessThan: 'Раніше ніж',\n            greaterThan: 'Пізніше ніж',\n            inRange: 'В проміжку',\n          }\n        }}\n      >\n        {columns.map(column => <AgGridColumn {...column} key={column.field} />)}\n      </AgGridReact>\n      }\n    </div >\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}